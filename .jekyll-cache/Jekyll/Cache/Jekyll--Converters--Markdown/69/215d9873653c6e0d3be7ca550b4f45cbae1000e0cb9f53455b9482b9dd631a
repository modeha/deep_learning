I"è<h3 id="youtube-video-convert-to-mp3">Youtube Video convert to mp3</h3>
<p>Create a function that downloads the audio of the Youtube Video with a given ID
    and saves it in the folder given by path. Download it as an mp3. If there is a 
    problem downloading the file, handle the exception. If a file at <code class="highlighter-rouge">path</code> exists, 
    the function should return without attempting to download it again.</p>

<p>```python
from <strong>future</strong> import unicode_literals
import youtube_dl
import ffmpeg
import pandas as pd
import numpy as np
import csv
import threading
from tqdm import tqdm
from os.path import exists
import os
import sys</p>

<p>#TEST_DIR = os.path.dirname()</p>

<p>def download_audio(YTID: str, path: str) -&gt; None:
    ‚Äú‚Äù‚Äù
    Create a function that downloads the audio of the Youtube Video with a given ID
    and saves it in the folder given by path. Download it as an mp3. If there is a 
    problem downloading the file, handle the exception. If a file at <code class="highlighter-rouge">path</code> exists, 
    the function should return without attempting to download it again.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>** Use the library youtube_dl: https://github.com/ytdl-org/youtube-dl/ **
Args:
  YTID: Contains the youtube ID, the corresponding youtube video can be found at
  'https://www.youtube.com/watch?v='+YTID
  path: The path to the file where the audio will be saved
"""
video_url = 'https://www.youtube.com/watch?v='+YTID
  
#from youtube_dl import YoutubeDL
#ydl_opts = {
    #'ignoreerrors': True,
    #'simulate': True,
#}   
#with YoutubeDL(ydl_opts) as ydl:
  
    #info_dict = ydl.extract_info(video_url)
#print(info_dict)
#xx
#video_info = youtube_dl.YoutubeDL(ydl_opts).extract_info(url = video_url,download=False)

  
filename = YTID+".mp3"
options={
    'format':'bestaudio/best',
    'keepvideo':False,
    'outtmpl': path ,#"outtmpl" : path+"$(id)s.$(ext)s" 
    'ignoreerrors': True,
}
video_info = youtube_dl.YoutubeDL(options).extract_info(url = video_url,download=False)
if (video_info is None) is False:
    with youtube_dl.YoutubeDL(options) as ydl:
        ydl.download([video_info['webpage_url']])
        print("Download complete... {}".format(filename))  
else:
    print("Oops!  That was no valid YTID.  Try again...")
# to dowload vido use :
#ydl_opts = {}   
#with youtube_dl.YoutubeDL(ydl_opts) as ydl:
    #ydl.download(['https://www.youtube.com/watch?v='+YTID])   
</code></pre></div></div>

<p>def cut_audio(in_path: str, out_path: str, start: float, end: float) -&gt; None:
    ‚Äú‚Äù‚Äù
    Create a function that cuts the audio from in_path to only include the segment 
    from start to end and saves it to out_path.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>** Use the ffmpeg library: https://github.com/kkroening/ffmpeg-python
Args:
  in_path: Path of the audio file to cut
  out_path: Path of file to save the cut audio
  start: Indicates the start of the sequence (in seconds)
  end: Indicates the end of the sequence (in seconds)
"""
# TODO
try:
    input = ffmpeg.input(in_path)
    audio = input.audio.filter("atrim", start, end)
    out = ffmpeg.output(audio, out_path)
    ffmpeg.run(out,capture_stdout=True, capture_stderr=True)
except ValueError:
    print("Oops!  That was no valid file.  Try again...")
</code></pre></div></div>

<p>```python</p>
:ET